// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: doorman.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Doorman_CheckAccount_FullMethodName = "/endpoints.doorman.Doorman/CheckAccount"
	Doorman_OpenDoor_FullMethodName     = "/endpoints.doorman.Doorman/OpenDoor"
)

// DoormanClient is the client API for Doorman service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoormanClient interface {
	CheckAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OfficePermission, error)
	OpenDoor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DoorState, error)
}

type doormanClient struct {
	cc grpc.ClientConnInterface
}

func NewDoormanClient(cc grpc.ClientConnInterface) DoormanClient {
	return &doormanClient{cc}
}

func (c *doormanClient) CheckAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OfficePermission, error) {
	out := new(OfficePermission)
	err := c.cc.Invoke(ctx, Doorman_CheckAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doormanClient) OpenDoor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DoorState, error) {
	out := new(DoorState)
	err := c.cc.Invoke(ctx, Doorman_OpenDoor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoormanServer is the server API for Doorman service.
// All implementations must embed UnimplementedDoormanServer
// for forward compatibility
type DoormanServer interface {
	CheckAccount(context.Context, *emptypb.Empty) (*OfficePermission, error)
	OpenDoor(context.Context, *emptypb.Empty) (*DoorState, error)
	mustEmbedUnimplementedDoormanServer()
}

// UnimplementedDoormanServer must be embedded to have forward compatible implementations.
type UnimplementedDoormanServer struct {
}

func (UnimplementedDoormanServer) CheckAccount(context.Context, *emptypb.Empty) (*OfficePermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccount not implemented")
}
func (UnimplementedDoormanServer) OpenDoor(context.Context, *emptypb.Empty) (*DoorState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDoor not implemented")
}
func (UnimplementedDoormanServer) mustEmbedUnimplementedDoormanServer() {}

// UnsafeDoormanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoormanServer will
// result in compilation errors.
type UnsafeDoormanServer interface {
	mustEmbedUnimplementedDoormanServer()
}

func RegisterDoormanServer(s grpc.ServiceRegistrar, srv DoormanServer) {
	s.RegisterService(&Doorman_ServiceDesc, srv)
}

func _Doorman_CheckAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoormanServer).CheckAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Doorman_CheckAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoormanServer).CheckAccount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Doorman_OpenDoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoormanServer).OpenDoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Doorman_OpenDoor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoormanServer).OpenDoor(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Doorman_ServiceDesc is the grpc.ServiceDesc for Doorman service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Doorman_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "endpoints.doorman.Doorman",
	HandlerType: (*DoormanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAccount",
			Handler:    _Doorman_CheckAccount_Handler,
		},
		{
			MethodName: "OpenDoor",
			Handler:    _Doorman_OpenDoor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doorman.proto",
}
